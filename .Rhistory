crossgene <- intersect(df2$gene,genes$Gene_symbol)
genes.select <- genes[genes$Gene_symbol%in%crossgene,]
df3 <- df2[df2$gene%in%crossgene,]
num <- length(unique(df3$cluster))
numall <- length(unique(df$cluster))
redf <- data.frame(res,num,numall,num/numall,crossgene)
return(redf)
}
mylab(0.1)
result <- list()
for(i in 1:10){
result[[i]] <- mylab(i/10)
print(i)
}
View(result)
result
DimPlot(scRNA_harmony, reduction = "umap", label=T,group.by = "RNA_snn_res.0.3")
res=0.3
df <- FindAllMarkers(scRNA_harmony,only.pos = T,min.pct = 0.5,logfc.threshold = 1)
df2 <- df %>% dplyr::select_all()%>% group_by(cluster) %>% top_n(10,avg_log2FC)#分组求最大值
crossgene <- intersect(df2$gene,genes$Gene_symbol)
genes.select <- genes[genes$Gene_symbol%in%crossgene,]
df3 <- df2[df2$gene%in%crossgene,]
View(df3)
View(df3)
res=0.3
scRNA_harmony <- FindClusters(scRNA_harmony,resolution = res)
df <- FindAllMarkers(scRNA_harmony,only.pos = T,min.pct = 0.5,logfc.threshold = 1)
df2 <- df %>% dplyr::select_all()%>% group_by(cluster) %>% top_n(10,avg_log2FC)#分组求最大值
crossgene <- intersect(df2$gene,genes$Gene_symbol)
genes.select <- genes[genes$Gene_symbol%in%crossgene,]
df3 <- df2[df2$gene%in%crossgene,]
View(df3)
View(df)
res=0.2
scRNA_harmony <- FindClusters(scRNA_harmony,resolution = res)
df <- FindAllMarkers(scRNA_harmony,only.pos = T,min.pct = 0.5,logfc.threshold = 1)
df2 <- df %>% dplyr::select_all()%>% group_by(cluster) %>% top_n(10,avg_log2FC)#分组求最大值
crossgene <- intersect(df2$gene,genes$Gene_symbol)
genes.select <- genes[genes$Gene_symbol%in%crossgene,]
df3 <- df2[df2$gene%in%crossgene,]
df2 <- df %>% dplyr::select_all()%>% group_by(cluster) %>% top_n(20,avg_log2FC)#分组求最大值
crossgene <- intersect(df2$gene,genes$Gene_symbol)
genes.select <- genes[genes$Gene_symbol%in%crossgene,]
df3 <- df2[df2$gene%in%crossgene,]
DimPlot(scRNA_harmony, reduction = "umap", label=T)
df2 <- df %>% dplyr::select_all()%>% group_by(cluster) %>% top_n(2,avg_log2FC)#分组求最大值
View(df3)
crossgene <- intersect(df2$gene,genes$Gene_symbol)
genes.select <- genes[genes$Gene_symbol%in%crossgene,]
df3 <- df2[df2$gene%in%crossgene,]
View(p2)
View(df2)
FeaturePlot(scRNA_harmony,features = "NR2C2")
VlnPlot(scRNA_harmony,features = "NR2C2")
FeaturePlot(scRNA_harmony,features = "EEF2K")
VlnPlot(scRNA_harmony,features = "EEF2K")
FeaturePlot(scRNA_harmony,features = "LMO3")
VlnPlot(scRNA_harmony,features = "LMO3")
FeaturePlot(scRNA_harmony,features = "S100B")
VlnPlot(scRNA_harmony,features = "S100B")
FeaturePlot(scRNA_harmony,features = "CASR")
VlnPlot(scRNA_harmony,features = "GCM2")
FeaturePlot(scRNA_harmony,features = "GCM2")
VlnPlot(scRNA_harmony,features = "GCM2")
FeaturePlot(scRNA_harmony,features = "CASR")
VlnPlot(scRNA_harmony,features = "CASR")
FeaturePlot(scRNA_harmony,features = "CASR")
FeaturePlot(scRNA_harmony,features = "NR2C2")
VlnPlot(scRNA_harmony,features = "CASR")
FeaturePlot(scRNA_harmony,features = "NR2C2")
FeaturePlot(scRNA_harmony,features = "EEF2K")
View(df2)
FeaturePlot(scRNA_harmony,features = "SPARCL1")
FeaturePlot(scRNA_harmony,features = "BEX1")
FeaturePlot(scRNA_harmony,features = "ISG15")
FeaturePlot(scRNA_harmony,features = "NEAT1")
FeaturePlot(scRNA_harmony,features = "
PTHLH")
FeaturePlot(scRNA_harmony,features = "PTHLH")
FeaturePlot(scRNA_harmony,features = c('CD14','CD163','CD209'))
VlnPlot(scRNA_harmony,features = "CASR")
FeaturePlot(scRNA_harmony,features = "CCL5")
stacked_bar_plot_v6(scRNA_harmony,scRNA_harmony$RNA_snn_res.0.1)
stacked_bar_plot_v6(scRNA_harmony,scRNA_harmony$RNA_snn_res.0.15)
DimPlot(scRNA_harmony, reduction = "umap", label=T,group.by = "RNA_snn_res.0.15")
scRNA_harmony <- FindClusters(scRNA_harmony,resolution = 0.1)
DimPlot(scRNA_harmony, reduction = "umap", label=T)
stacked_bar_plot_v6(scRNA_harmony,scRNA_harmony$RNA_snn_res.0.15)
stacked_bar_plot_v6(scRNA_harmony,scRNA_harmony$RNA_snn_res.0.1)
df <- FindAllMarkers(scRNA_harmony,only.pos = T,min.pct = 0.5,logfc.threshold = 1)
scRNA_harmony <- FindClusters(scRNA_harmony,resolution = 0.1)
DimPlot(scRNA_harmony, reduction = "umap", label=T)
View(df)
FeaturePlot(scRNA_harmony,features = "PTHLH")
FeaturePlot(scRNA_harmony,features = "S100A13")
VlnPlot(scRNA_harmony,features = "S100A13")
paralist <- list(
chief.cells.marker = c("NR2C2","EEF2K"),
oxyphilic.cells.marker = c( "CASR","GCM2","S100B","PTHLH"))
scRNA_harmony@meta.data$RNA_snn_res.1
scRNA_harmony@meta.data$RNA_snn_res.0.1
celltype=data.frame(ClusterID=0:5,
celltype=0:5)
celltype[celltype$ClusterID %in% c( 1 ),2]='PTHLH-OC'
celltype[celltype$ClusterID %in% c( 2  ),2]='S100A13-PCC'
celltype[celltype$ClusterID %in% c( 3 ),2]='ISG15-OC'
celltype[celltype$ClusterID %in% c(  4 ),2]='NEAT1-PCC'
celltype[celltype$ClusterID %in% c( 0 ),2]='SPARCL1-OC'
# celltype[celltype$ClusterID %in% c(  3 ),2]='Myeloid cells'
# #celltype[celltype$ClusterID %in% c(  4 ),2]='Homo microglia'
# celltype[celltype$ClusterID %in% c(),2]='Parathyroid cell'
for(i in 1:nrow(celltype)){
scRNA_harmony@meta.data[which(scRNA_harmony@meta.data$RNA_snn_res.0.1 == celltype$ClusterID[i]),'celltype'] <- celltype$celltype[i]}
#table(scRNA_harmony@meta.data$RNA_snn_res.0.4,scRNA_harmony2$orig.ident)
DimPlot(scRNA_harmony, group.by="celltype", label=F, reduction='umap')
#table(scRNA_harmony@meta.data$RNA_snn_res.0.4,scRNA_harmony2$orig.ident)
DimPlot(scRNA_harmony, group.by="celltype", label=F, reduction='umap')
scRNA_harmony$celltype
celltype
celltype
celltype
celltype=data.frame(ClusterID=0:4,
celltype=0:4)
celltype[celltype$ClusterID %in% c( 1 ),2]='PTHLH-OC'
celltype[celltype$ClusterID %in% c( 2  ),2]='S100A13-PCC'
celltype[celltype$ClusterID %in% c( 3 ),2]='ISG15-OC'
celltype[celltype$ClusterID %in% c(  4 ),2]='NEAT1-PCC'
celltype[celltype$ClusterID %in% c( 0 ),2]='SPARCL1-OC'
# celltype[celltype$ClusterID %in% c(  3 ),2]='Myeloid cells'
# #celltype[celltype$ClusterID %in% c(  4 ),2]='Homo microglia'
# celltype[celltype$ClusterID %in% c(),2]='Parathyroid cell'
for(i in 1:nrow(celltype)){
scRNA_harmony@meta.data[which(scRNA_harmony@meta.data$RNA_snn_res.0.1 == celltype$ClusterID[i]),'celltype'] <- celltype$celltype[i]}
#table(scRNA_harmony@meta.data$RNA_snn_res.0.4,scRNA_harmony2$orig.ident)
DimPlot(scRNA_harmony, group.by="celltype", label=F, reduction='umap')
scRNA_harmony$celltype
celltype
nrow(celltype)
for(i in 1:nrow(celltype)){
scRNA_harmony@meta.data[which(scRNA_harmony@meta.data$RNA_snn_res.0.1 == celltype$ClusterID[i]),'celltype'] <- celltype$celltype[i]}
scRNA_harmony@meta.data[which(scRNA_harmony@meta.data$RNA_snn_res.0.1 == celltype$ClusterID[i]),'subcelltype'] <- celltype$celltype[i]}
for(i in 1:nrow(celltype)){
scRNA_harmony@meta.data[which(scRNA_harmony@meta.data$RNA_snn_res.0.1 == celltype$ClusterID[i]),'subcelltype'] <- celltype$celltype[i]}
DimPlot(scRNA_harmony, group.by="subcelltype", label=F, reduction='umap')
saveRDS(scRNA_harmony, 'Para注释后scRNA_harmony1206.rds')
library(ggsci)
DimPlot(scRNA_harmony, group.by="subcelltype", label=F, reduction='umap')+ggsci::scale_fill_nejm()
DimPlot(scRNA_harmony, group.by="subcelltype", label=F, reduction='umap')+ggsci::scale_color_nejm()
scRNA_harmony <- readRDS("注释后scRNA_harmony1206.rds")
paralist <- list(
chief.cells.marker = c("NR2C2","EEF2K"),
oxyphilic.cells.marker = c( "CASR","GCM2","S100B","PTHLH"))
for (i in 1:length(paralist)) {
pp <- FeaturePlot(scRNA_harmony, features = paralist[[i]])
print(pp+ggtitle( names(Tlist)[i]))
}
##
source("I:\\BaiduSyncdisk\\02AF多组学分析\\result\\monocle2function.R")
monocle2cds <- mymonocle2(scRNA_harmony) #monocle2function.R
para <- readRDS("Para注释后scRNA_harmony1206.rds")
DimPlot(scRNA_harmony, group.by="subcelltype", label=F, reduction='umap')+ggsci::scale_color_nejm()
DimPlot(scRNA_harmony, group.by="subcelltype", label=F, reduction='umap')+ggsci::scale_color_nejm()
shiny::runApp('D:/new desktop/shiny/TH2Asorting')
runApp('D:/new desktop/shiny/AFDB')
runApp('D:/new desktop/shiny/TH2Asorting')
runApp('D:/new desktop/shiny/AFDB')
knitr::opts_chunk$set(echo = F,results = "hide",eval = T,warning=FALSE,message=FALSE)
knitr::opts_chunk$set(echo = F,results = "hide",eval = T,warning=FALSE,message=FALSE)
piclist <- readRDS("02UCell/保存图片.rds")
piclist[[3]]
piclist[[2]]
shiny::runApp('D:/new desktop/shiny/AFDB')
runApp('D:/new desktop/shiny/AFDB')
shinyServer(function(input, output,session) {
output$r3dmol <- renderR3dmol({
if (input$select_single_model == dn[[1]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[1]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
} else if (input$select_single_model ==  dn[[2]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[2]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[3]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[3]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[4]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[4]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[5]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[5]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[6]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[6]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[7]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[7]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[8]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[8]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[9]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[9]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[2]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[2]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[10]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[10]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[11]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[11]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[12]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[12]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[13]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[13]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[14]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[14]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[15]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[15]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[16]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[16]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[17]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[17]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[18]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[18]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[19]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[19]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[20]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[20]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()
}else if (input$select_single_model ==  dn[[21]]) {
r3dmol( cartoonQuality = 10,lowerZoomLimit = 50,upperZoomLimit = 350, backgroundColor = "#FFFFFF") %>%
m_add_model(data = drugs[[21]],format = "sdf", options = list(vibrate = list(frames = 10, amplitude = 1))) %>%
m_set_style(sel = m_sel(model = 0), style = m_style_stick(colorScheme = "cyanCarbon")) %>%
m_zoom_to()}
})
observeEvent(input$select_single_model, {
output$select_panel <- renderUI({
animate_panel <- switch(
input$select_single_model,
"animate_sample" = radioButtons(
inputId = "animate",
label = "Animate",
choices = c(FALSE, TRUE),
inline = TRUE
)
)
tagList(
selectInput(
inputId = "set_style",
label = "Set Style",
choices = c("Line", "Cross", "Stick", "Sphere", "Cartoon"),
selected = "Line"
),
sliderInput(
inputId = "set_slab",
label = "Set slab of view",
min = -150,
value = c(-50, 50),
animate = TRUE,
step = 10,
max = 150,
dragRange = TRUE
),
radioButtons(
inputId = "set_projection",
label = "Set view projection scheme",
choices = c("perspective", "orthographic"),
inline = TRUE
),
sliderInput(
inputId = "set_perceived_distance",
label = "Set perceived distance",
min = 0,
max = 500,
value = 300
),
animate_panel
)
})
})
observeEvent(input$set_background_color, {
m_set_background_color(
id = "r3dmol",
hex = input$set_background_color
)
})
observeEvent(input$spin, {
m_spin(id = "r3dmol")
})
observeEvent(input$animate, {
if (input$animate) {
m_animate(id = "r3dmol", list(loop = "backAndForth"))
} else {
m_stop_animate(id = "r3dmol")
}
})
observeEvent(input$zoom_out, {
m_zoom(
id = "r3dmol",
factor = 0.7,
animationDuration = 1000
)
})
observeEvent(input$zoom_in, {
m_zoom(
id = "r3dmol",
factor = 1.3,
animationDuration = 1000
)
})
observeEvent(input$set_style, {
style <- switch(
input$set_style,
"Line" = list(line = list()),
"Cartoon" = list(cartoon = list()),
"Stick" = list(stick = list()),
"Cross" = list(cross = list()),
"Sphere" = list(sphere = list())
)
m_set_style(
id = "r3dmol",
style = style
)
})
observeEvent(input$set_projection, {
m_set_projection(id = "r3dmol", scheme = input$set_projection)
})
observeEvent(input$clear, {
m_clear(id = "r3dmol")
})
observeEvent(input$set_slab, {
m_set_slab(
id = "r3dmol",
near = input$set_slab[1],
far = input$set_slab[2]
)
})
observeEvent(input$set_perceived_distance, {
m_set_preceived_distance(id = "r3dmol", dist = input$set_perceived_distance)
})
observe({
x <- input$inCheckboxGroup
#读取应用程序data下的数据文件      drug_info=read.delim('./data/drug_info.txt',check.names=TRUE, stringsAsFactors=FALSE,sep = '\t')
output$plot2 <- renderPlot({
drug_info = drug_info[which(drug_info$drug_type==x),]
drug_name =  paste(x,'作用基因',sep='')
data = table(na.omit(drug_info$gene))
data=data.frame(data)
ggplot(data,aes(x=Var1, y=Freq)) +
geom_bar(stat="identity",fill="lightblue")+
theme(text = element_text(family = "STHeiti"),axis.text.x = element_text(angle=90, hjust=1, vjust=1))+
labs(x =drug_name, y = "作用基因的snp数")
})
output$table <- renderReactable({
reactable(
textm,
###指定所有列的格式
defaultColDef = colDef(
align = "center",
headerStyle = list(background = "lightblue")
),
# columns = list(
#   c_drugname = colDef(name = "药物名称"),
#   drug_type = colDef(name = "药物大类"),
#   main_categroy = colDef(name = "药物子类"),
#   clinical_level =colDef(name = "药物临床等级"),
#   rs =  colDef(name = "基因位点"),
#   chr=colDef(name = "染色体号"),
#   ref=colDef(name = "位点参考"),
#   alt=colDef(name = "位点变化"),
#   pubmed_id = colDef(name = "PMID"),
#   gene=colDef(name = "基因"),
#   genotype_1=colDef(name ='基因型1',width = 100),
#   genotype_2=colDef(name ='基因型2',width = 100),
#   genotype_3=colDef(name ='基因型3',width = 100),
#   annotation_1 =colDef(name ='药物疗效1',width = 300),
#   annotation_2 =colDef(name ='药物疗效2',width = 300),
#   annotation_3 =colDef(name ='药物疗效3',width = 300),
#   rs = colDef(align = "center")
# ),
bordered = TRUE,                   ###边线
highlight = TRUE,                   ###高亮
searchable=TRUE,                       ###搜索
filterable=TRUE,                         ###过滤
defaultPageSize=15,     ###分页
pageSizeOptions=c(10,15,20),
showPageSizeOptions=TRUE,
paginationType="jump"
)
})
output$table2 <- renderReactable({
reactable(
diff,
###指定所有列的格式
defaultColDef = colDef(
align = "center",
headerStyle = list(background = "lightblue")
),
bordered = TRUE,                   ###边线
highlight = TRUE,                   ###高亮
searchable=TRUE,                       ###搜索
filterable=TRUE,                         ###过滤
defaultPageSize=15,     ###分页
pageSizeOptions=c(10,15,20),
showPageSizeOptions=TRUE,
paginationType="jump"
)
})
output$pic3 <- renderR3dmol( p2%>%
m_spin(axis = "y"))
output$picGPR17 <- renderR3dmol(GPR17)
# output$r3dmol <- renderR3dmol({
#   if (input$select_single_model == "6zsl") {
#     p2%>% m_spin(axis = "y")
#   } else if (input$select_single_model == "animate_sample") {
#     xyz <- "4
#     * (null), Energy   -1000.0000000
#     N     0.000005    0.019779   -0.000003   -0.157114    0.000052   -0.012746
#     H     0.931955   -0.364989    0.000003    1.507100   -0.601158   -0.004108
#     H    -0.465975   -0.364992    0.807088    0.283368    0.257996   -0.583024
#     H    -0.465979   -0.364991   -0.807088    0.392764    0.342436    0.764260
#     "
#
#     r3dmol(
#       cartoonQuality = 10,
#       lowerZoomLimit = 50,
#       upperZoomLimit = 350,
#       backgroundColor = "#000000"
#     ) %>%
#       m_add_model(
#         data = xyz,
#         format = "xyz",
#         options = list(vibrate = list(
#           frames = 10, amplitude = 1
#         ))
#       ) %>%
#       m_zoom_to()
#   }
})
})
runApp('D:/new desktop/shiny/AFDB')
runApp('D:/new desktop/shiny/AFDB')
runApp('D:/new desktop/shiny/AFDB')
runApp('D:/new desktop/shiny/AFDB')
runApp('D:/new desktop/shiny/AFDB')
runApp('D:/new desktop/shiny/AFDB')
runApp('D:/new desktop/shiny/AFDB')
runApp('D:/new desktop/shiny/AFDB')
library(rsconnect)
deployApp()
setwd("D:\\new desktop/shiny/AFDB/")
deployApp()
rsconnect::setAccountInfo(name='chenxi2023',
token='A08A045699A9ED4B59BC73ECF93B7F6D',
secret='<SECRET>')
rsconnect::setAccountInfo(name='chenxi2023',
token='A08A045699A9ED4B59BC73ECF93B7F6D',
secret='I756AfKUubG7mW2vLFn29EjhK6dMRCQXny7b3y4k')
deployApp()
deployApp()
